
# first, last = input('please enter your name: ').split(' ')

# print(first)
# print(last)


# meats = ['beef', 'chicken', 'steak', 'lamb', 'pork']

# for index, meat in enumerate(meats, 1):
#     print(f'{index}. {meat}')
    

""" Enumerates the loops in the iterable
    2nd value passed to iterable inside the enmuerate method is the starting number
    for the lines that are retuned, in this case the first item numeral will be 1
"""

_______**
RANGES

Range method will iterate from the start val to the stop val 
and step-thru by the step val.
Note - if no start val is passed or less than 3 args are passed, 
Python assumes starting point is 0, defaul step value is 1


range(start, stop, step)

for i in range(0,10,1)
    print(i)

Ranges are EXclusive of stop values, so the loop above will not run / output of 10,
only values 0 thru 9 will be printed.

* Note - as Python will defaul start and step args to 0 an 1, this loop can
  be expressed as 'for i in range(10): etc'

_______**


_______**
SLICES

Portion of a sequence, similar syntax as range()

given a sequence, seq, with a list of values

seq = [1,2,3,4,5,6,7,8,9]

seq[ start : stop : step ]

seq[1:4:1] will be interetpreted as 'take a slice of sequence 'seq',
starting with the first value, ending with the 4th value, incrementing 
by 1 each time

* Notes

    - slice method assumes if no values are given for start / stop / step
      points, the default vaules are the first val, last val, and 1

    - slice w/ step value of -1 will reverse a list

    - slice doesn't change the original sequence, it creates a new one

    - 



_______**


LEN, MIN, MAX

All built-in functions that will work on all sequences which contain all
elements of the same datatype )all numbers, all strings, etc)

len() - returns length of sequence passed as argument

min() - returns minimum value of sequence passed as argument

max() - returns largest value in sequence passed as argument


_______**

MEMBERSHIP TESTING

Whether or not an item or sequence is IN another sequence

docs = "any random string"

if 'random' in* docs:
    # do something
else:
    # do something else

* Note - also works as 'not in' - test condition will eval to true / false
 depending on what you're looking for as well

_______**

COUNT & INDEX Methods


COUNT
    docs = "any random string"

    print(docs.count('target value'))
        returns int value of number of times the target 
        string or value is found in the target sequence(s)

    docs = "any random string"

INDEX
    print(docs.index('target value'))
        returns int value of the first index position of the 
        first appearance of the target value's appearance in the
        sequence passed to the .index() method.
        Note - only returns index value of FIRST instance of target value


_______**


CONCANTENATION

combining two objects together, for mutable sequences this will modify
one sequence, for immutable sequences this will need to create a NEW sequence
and is accomplished with the plus sign (+)

MULTIPLICATION

sequence name plus multiplication sign (*) and the (int) value to multiply it


_______**

DICTIONARIES

Similarities to lists, contain comma-separated values, indexed by their key and
wrapped in curly-braces 

    dictionary = {'name':'Ryan', 'job':'manager', 'age':38}

    Keys must be immutable type, Values can be any type (of data)

    Accessing data inside a dictionary

        given a sample dictionary above, to access the first value we would use

            dictionary['name']

                Similar acces methods to get value out of a List, however we use
                the key's value to get the assocaited value

            .keys() & .values Methods

                returns list of keys / values (respectively) within a dictionary and 
                returns as a list

                    dictionary.keys() - returns list of keys
                    dictionary.values() - returns list of keys' values

    Updating and Mutating DICTIONARIES

        Changing a value for a key requires accessing the existing value's key and
        setting it to the new desired value by assignment, example below;

            dictionary['name'] = 'Archie'
                // this will change the value store with the 'name' key from 'Ryan'
                    to 'Archie', the old value is overwritten

        Adding a new key:value pair uses same syntax
            dictionary['stages'] = 2
                // this will create a new key:value pair and assign the passed value
                to the (created) key, python will add it at the end of the dictionary

        Removing a key:value pair from dictionary with the del() method
           del(dictionary['stages'])
                // this will delete - remove the associated key:value pair from the 
                dictionary

                